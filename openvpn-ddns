#!/usr/bin/env ruby

require 'json'
require 'tempfile'
require 'ipaddr'
require 'socket'

##
# Configuration
##
class Configuration
  attr_reader :name_server, :private_key, :nsupdate_executable, :zones,
              :v4_reverse_zones, :v6_reverse_zones

  def initialize(config_file)
    config = load_config(config_file)
    @name_server           = assert_type(config, 'name_server', String, true)
    @private_key           = assert_type(config, 'private_key', String)
    @zones                 = assert_type(config, 'zones', Array, true)
    reverse_zones          = assert_type(config, 'reverse_zones', Array, true)
    @nsupdate_executable   = assert_type(config, 'nsupdate_executable', String)
    set_reverse_zones(reverse_zones)
  end

  def load_config(config_file)
    begin
      json = JSON.load(File.open(config_file))
    rescue => e
      abort "Failed to load configuration: #{e}"
    end
    abort 'configuration is empty' if json.nil? || json == ''
    config = json['nsupdate'] or abort "no 'nsupdate' object found in configuration"
    abort "'nsupdate' should be an object" unless config.is_a? Hash
    config
  end

  def set_reverse_zones(reverse_zones)
    @v4_reverse_zones = []
    @v6_reverse_zones = []

    reverse_zones.each do |zone|
      if zone.end_with?('in-addr.arpa')
        @v4_reverse_zones << zone
      elsif zone.end_with?('ip6.arpa')
        @v6_reverse_zones << zone
      else
        abort "invalid reverse zone #{zone}"
      end
    end
  end

  def assert_type(config, key, type, required = false)
    val = config[key]
    unless val.nil? || val.is_a?(type)
      abort "key '#{key}' should be an #{type.to_s.downcase}"
    end
    if required
      abort "'#{key}' is required, but is empty" if val.nil?
      abort "'#{key}' is required, but is empty" if val.length == 0
    end
    val
  end
end

##
# Nsupdate
##
class Nsupdate
  def initialize(config)
    @config = config
  end

  def remove_record(ip, common_name)
    change_record(ip, common_name, false)
  end

  def add_record(ip, common_name)
    change_record(ip, common_name, true)
  end

  private

  def change_record(ip, common_name, add)
    transaction = []

    transaction += forward_entry(ip, common_name, @config.zones, add)
    transaction += reverse_entry(ip, common_name, add)

    private_key = @config.private_key ? ["key #{@config.private_key}"] : []

    return if transaction.empty?

    perform(["server #{@config.name_server}"] + private_key + transaction + ['quit'])
  end

  def forward_entry(ip, common_name, zones, add)
    transaction = []

    zones.each do |zone|
      next if zone.nil?
      transaction << "zone #{zone}"
      transaction << "update delete #{common_name}.#{zone}. #{rtype(ip)}"
      transaction << "update add #{common_name}.#{zone}. 3600 #{rtype(ip)} #{ip.to_string}" if add
      transaction << 'send'
    end
    transaction
  end

  def reverse_entry(ip, common_name, add)
    transaction = []

    r_zones = ip.ipv4? ? @config.v4_reverse_zones : @config.v6_reverse_zones

    r_zones.each do |r_zone|
      next if r_zone.nil?
      transaction << "zone #{r_zone}"
      transaction << "update delete #{ip.reverse}. PTR"
      transaction << "update add #{ip.reverse}. 3600 PTR #{common_name}" if add
      transaction << 'send'
    end
    transaction
  end

  # def normalize(s)
  #   # remove leading/trailing dots
  #   # remove characters not allowed in fqdn
  #   s.gsub(/^\.|\.$|[^a-zA-Z0-9\-.]+/, '')
  # end

  def rtype(ip)
    ip.ipv4? ? 'A' : 'AAAA'
  end

  def perform(transaction)
    cmd = [@config.nsupdate_executable || 'nsupdate']
    puts("$ #{cmd.join(' ')} <<'EOF'")
    puts(transaction.join("\n"))
    puts("'EOF'")
    return # Debug until ready
    IO.popen(cmd, 'r+') do |io|
      io.write(transaction.join("\n"))
      io.close_write
      puts(io.read)
    end
  end
end

def find_config
  script_dir = File.dirname(__FILE__)

  lookup_paths = [
    'openvpn-ddns.json',
    File.join(script_dir, 'openvpn-ddns.json'),
    '/etc/openvpn/openvpn-ddns.json',
    '/usr/local/etc/openvpn/openvpn-ddns.json'
  ]

  openvpn_config = ENV['openvpn_ddns_config']
  if openvpn_config
    basename = File.basename(openvpn_config)
    stripped = basename.gsub(/\.(ovpn|config)/, '')
    config_name = "#{stripped}.openvpn-ddns.json"
    lookup_paths = [
      config_name,
      File.join(script_dir, config_name),
      File.join('/etc/openvpn/', config_name),
      File.join('/usr/local/etc/openvpn/', config_name)
    ] + lookup_paths
  end

  lookup_paths.map! { |p| File.expand_path(p) }

  lookup_paths.each do |path|
    return path if File.exist?(path)
  end

  abort "configuration not found, tried the following paths:\n#{lookup_paths.join("\n")}"
end

def main
  config_file = find_config
  config = Configuration.new(config_file)

  if ARGV.size > 3
    abort "USAGE: #{$PROGRAM_NAME} TUN_DEV TUN_MTU LINK_MTU ADDRESS REMOTE_ADDRESS (init | restart) see up command in openvpn docs" if ARGV.size < 6
    # For up command
    # cmd tun_dev tun_mtu link_mtu ifconfig_local_ip ifconfig_remote_ip [ init | restart ]
    #        0       1        2           3                 4                  5
    if ARGV[5] == 'restart'
      operation = 'update'
    else
      operation = 'add'
    end
    cn = Socket.gethostname
    address = ARGV[3]
  else
    abort "USAGE: #{$PROGRAM_NAME} (add|update|delete) ADDRESS CN" if ARGV.size < 3
    operation, address, cn = ARGV
  end

  begin
    ip = IPAddr.new(address).native
  rescue IPAddr::InvalidAddressError => e
    abort "error parsing address '#{address}': #{e}"
  end

  nsupdate = Nsupdate.new(config)
  case operation
  when 'add', 'update'
    nsupdate.add_record(ip, cn)
  when 'delete'
    nsupdate.remove_record(ip, cn)
  else
    abort "unknown operation #{operation}"
  end
rescue SystemExit
  # abort was called, no need for logging
rescue Exception => e
  # log exception without exit != 0
  puts "#{e.class}: #{e}"
  print e.backtrace.join("\n")
ensure
  exit 0
end

main
